<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CNN on Kaiya Xiong&#39;s Blog</title><link>https://kaiyai.com/tags/cnn/</link><description>Recent content in CNN on Kaiya Xiong&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Aug 2018 01:03:09 +0800</lastBuildDate><atom:link href="https://kaiyai.com/tags/cnn/index.xml" rel="self" type="application/rss+xml"/><item><title>CNN in Tensorflow</title><link>https://kaiyai.com/post/tfcnn/</link><pubDate>Tue, 14 Aug 2018 01:03:09 +0800</pubDate><guid>https://kaiyai.com/post/tfcnn/</guid><description>import tensorflow as tf from tensorflow.examples.tutorials.mnist import input_data # number 1 to 10 data mnist = input_data.read_data_sets(&#39;MNIST_data&#39;, one_hot=True) def compute_accuracy(v_xs, v_ys): # validation xs and validation ys global prediction y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 1}) correct_prediction = tf.equal(tf.arg_max(y_pre, 1), tf.arg_max(v_ys, 1)) accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys, keep_prob: 1}) return result def weight_variable(shape): initial = tf.truncated_normal(shape, stddev=0.1) return tf.Variable(initial) def bias_variable(shape): initial = tf.constant(0.1, shape=shape) return tf.</description></item></channel></rss>